-- 1. Verificar y crear roles básicos si no existen
INSERT INTO Roles (NombreRol, Descripcion)
SELECT * FROM (
    SELECT 'Administrador' AS NombreRol, 'Acceso completo al sistema' AS Descripcion
    UNION SELECT 'Coordinador', 'Puede crear y administrar juntas'
    UNION SELECT 'Participante', 'Usuario regular que participa en juntas'
    UNION SELECT 'Auditor', 'Solo puede ver información, no modificarla'
    UNION SELECT 'Cobrador', 'Puede registrar pagos y gestionar cobranzas'
) AS nuevos_roles
WHERE NOT EXISTS (
    SELECT 1 FROM Roles WHERE NombreRol = nuevos_roles.NombreRol
);

-- 2. Verificar y crear permisos del sistema si no existen
INSERT INTO Permisos (NombrePermiso, Descripcion, Codigo)
SELECT * FROM (
    -- Permisos de administración
    SELECT 'Gestionar Usuarios' AS NombrePermiso, 'Crear, editar y eliminar usuarios' AS Descripcion, 'users.manage' AS Codigo
    UNION SELECT 'Gestionar Roles', 'Crear, editar y eliminar roles', 'roles.manage'
    UNION SELECT 'Gestionar Permisos', 'Asignar permisos a roles', 'permissions.manage'
    UNION SELECT 'Gestionar Configuraciones', 'Modificar configuraciones del sistema', 'settings.manage'
    
    -- Permisos de juntas
    UNION SELECT 'Crear Juntas', 'Crear nuevas juntas', 'juntas.create'
    UNION SELECT 'Editar Juntas', 'Modificar juntas existentes', 'juntas.edit'
    UNION SELECT 'Cerrar Juntas', 'Cerrar juntas completadas', 'juntas.close'
    UNION SELECT 'Ver Juntas', 'Ver listado de juntas', 'juntas.view'
    UNION SELECT 'Ver Detalle Junta', 'Ver detalles completos de una junta', 'juntas.detail'
    UNION SELECT 'Gestionar Todas las Juntas', 'Permite gestionar juntas de otros usuarios', 'juntas.manage_all'
    UNION SELECT 'Ver Mis Juntas', 'Permite ver las juntas propias', 'juntas.view_own'
    UNION SELECT 'Administrar Participantes', 'Gestionar participantes en juntas', 'juntas.manage_participants'
    
    -- Permisos de participantes
    UNION SELECT 'Agregar Participantes', 'Agregar usuarios a juntas', 'participants.add'
    UNION SELECT 'Remover Participantes', 'Remover usuarios de juntas', 'participants.remove'
    UNION SELECT 'Ver Participantes', 'Ver listado de participantes', 'participants.view'
    UNION SELECT 'Gestionar Participantes', 'Agregar, editar y eliminar participantes en juntas', 'participants.manage'
    UNION SELECT 'Asignar Orden Participantes', 'Definir el orden de recepción en juntas', 'participants.assign_order'
    
    -- Permisos para participantes en juntas (módulo específico)
    UNION SELECT 'Gestionar Participantes Juntas', 'Administrar completamente los participantes en juntas', 'participantesjuntas.manage'
    UNION SELECT 'Ver Participantes Juntas', 'Ver el listado de participantes en juntas', 'participantesjuntas.view'
    UNION SELECT 'Agregar Participantes a Juntas', 'Agregar nuevos participantes a juntas existentes', 'participantesjuntas.add'
    UNION SELECT 'Editar Participantes en Juntas', 'Modificar información de participantes en juntas', 'participantesjuntas.edit'
    UNION SELECT 'Eliminar Participantes de Juntas', 'Remover participantes de juntas', 'participantesjuntas.remove'
    UNION SELECT 'Asignar Orden de Participantes', 'Definir el orden de recepción de fondos para participantes', 'participantesjuntas.assign_order'
    UNION SELECT 'Gestionar Garantías de Participantes', 'Administrar las garantías asociadas a participantes', 'participantesjuntas.manage_guarantees'
    UNION SELECT 'Ver Historial de Participantes', 'Consultar el historial de participación en juntas', 'participantesjuntas.history'
    UNION SELECT 'Exportar Listado de Participantes', 'Exportar el listado de participantes a diferentes formatos', 'participantesjuntas.export'
    
    -- Permisos de pagos
    UNION SELECT 'Registrar Pagos', 'Registrar pagos de participantes', 'payments.register'
    UNION SELECT 'Ver Pagos', 'Ver historial de pagos', 'payments.view'
    UNION SELECT 'Aprobar Pagos', 'Aprobar pagos registrados', 'payments.approve'
    UNION SELECT 'Generar Reportes Pagos', 'Generar reportes de pagos', 'payments.reports'
    
    -- Permisos de desembolsos
    UNION SELECT 'Realizar Desembolsos', 'Realizar desembolsos a participantes', 'disbursements.create'
    UNION SELECT 'Ver Desembolsos', 'Ver historial de desembolsos', 'disbursements.view'
    UNION SELECT 'Aprobar Desembolsos', 'Aprobar desembolsos pendientes', 'disbursements.approve'
    
    -- Permisos de garantías
    UNION SELECT 'Gestionar Garantías', 'Registrar y gestionar garantías', 'guarantees.manage'
    UNION SELECT 'Ver Garantías', 'Ver información de garantías', 'guarantees.view'
    
    -- Permisos de reportes
    UNION SELECT 'Generar Reportes', 'Generar reportes del sistema', 'reports.generate'
    UNION SELECT 'Exportar Datos', 'Exportar datos a diferentes formatos', 'data.export'
    
    -- Permisos de auditoría
    UNION SELECT 'Ver Auditoría', 'Ver registros de auditoría', 'audit.view'
    UNION SELECT 'Ver Historial Sesiones', 'Ver historial de sesiones de usuarios', 'sessions.view'
    
    -- Permisos de notificaciones
    UNION SELECT 'Ver Notificaciones', 'Ver y gestionar notificaciones del sistema', 'notifications.view'
    
    -- Permisos de cuentas bancarias
    UNION SELECT 'Gestionar Cuentas Bancarias', 'Crear, editar y eliminar cuentas bancarias propias', 'accounts.manage'
    UNION SELECT 'Ver Cuentas Bancarias', 'Ver información de cuentas bancarias', 'accounts.view'
    UNION SELECT 'Gestionar Todas las Cuentas', 'Administrar cuentas bancarias de todos los usuarios', 'accounts.manage_all'
) AS nuevos_permisos
WHERE NOT EXISTS (
    SELECT 1 FROM Permisos WHERE Codigo = nuevos_permisos.Codigo
);

-- 3. Actualizar permisos existentes si es necesario
UPDATE Permisos SET 
    Descripcion = 'Permite ver el listado de juntas', 
    Codigo = 'juntas.view'
WHERE NombrePermiso = 'Ver Juntas' AND Codigo != 'juntas.view';

-- 4. Asignar permisos al rol Administrador (todos los permisos)
INSERT INTO Roles_Permisos (RolID, PermisoID)
SELECT r.RolID, p.PermisoID 
FROM Roles r
CROSS JOIN Permisos p
WHERE r.NombreRol = 'Administrador'
AND NOT EXISTS (
    SELECT 1 FROM Roles_Permisos rp 
    WHERE rp.RolID = r.RolID AND rp.PermisoID = p.PermisoID
);

-- 5. Asignar permisos al rol Coordinador
INSERT INTO Roles_Permisos (RolID, PermisoID)
SELECT r.RolID, p.PermisoID 
FROM Roles r
CROSS JOIN Permisos p
WHERE r.NombreRol = 'Coordinador'
AND p.Codigo IN (
    'juntas.create', 'juntas.edit', 'juntas.close', 'juntas.view', 'juntas.detail', 'juntas.manage_all', 'juntas.manage_participants',
    'participants.add', 'participants.remove', 'participants.view', 'participants.manage', 'participants.assign_order',
    'participantesjuntas.manage', 'participantesjuntas.view', 'participantesjuntas.add', 'participantesjuntas.edit', 
    'participantesjuntas.remove', 'participantesjuntas.assign_order', 'participantesjuntas.manage_guarantees', 'participantesjuntas.history',
    'payments.register', 'payments.view', 'payments.reports',
    'disbursements.create', 'disbursements.view',
    'guarantees.manage', 'guarantees.view',
    'reports.generate', 'data.export',
    'accounts.view', 'accounts.manage_all',
    'notifications.view'
)
AND NOT EXISTS (
    SELECT 1 FROM Roles_Permisos rp 
    WHERE rp.RolID = r.RolID AND rp.PermisoID = p.PermisoID
);

-- 6. Asignar permisos al rol Cobrador
INSERT INTO Roles_Permisos (RolID, PermisoID)
SELECT r.RolID, p.PermisoID 
FROM Roles r
CROSS JOIN Permisos p
WHERE r.NombreRol = 'Cobrador'
AND p.Codigo IN (
    'payments.register', 'payments.view',
    'disbursements.view',
    'guarantees.view',
    'juntas.view', 'juntas.detail',
    'participants.view',
    'participantesjuntas.view', 'participantesjuntas.manage_guarantees',
    'accounts.view',
    'notifications.view'
)
AND NOT EXISTS (
    SELECT 1 FROM Roles_Permisos rp 
    WHERE rp.RolID = r.RolID AND rp.PermisoID = p.PermisoID
);

-- 7. Asignar permisos al rol Participante
INSERT INTO Roles_Permisos (RolID, PermisoID)
SELECT r.RolID, p.PermisoID 
FROM Roles r
CROSS JOIN Permisos p
WHERE r.NombreRol = 'Participante'
AND p.Codigo IN (
    'juntas.view', 'juntas.detail', 'juntas.view_own',
    'payments.view',
    'disbursements.view',
    'guarantees.view',
    'participantesjuntas.view', 'participantesjuntas.history',
    'accounts.manage', 'accounts.view',
    'notifications.view'
)
AND NOT EXISTS (
    SELECT 1 FROM Roles_Permisos rp 
    WHERE rp.RolID = r.RolID AND rp.PermisoID = p.PermisoID
);

-- 8. Asignar permisos al rol Auditor
INSERT INTO Roles_Permisos (RolID, PermisoID)
SELECT r.RolID, p.PermisoID 
FROM Roles r
CROSS JOIN Permisos p
WHERE r.NombreRol = 'Auditor'
AND p.Codigo IN (
    'audit.view', 'sessions.view',
    'juntas.view', 'juntas.detail',
    'participants.view',
    'participantesjuntas.view', 'participantesjuntas.history',
    'payments.view', 'payments.reports',
    'disbursements.view',
    'guarantees.view',
    'reports.generate',
    'accounts.view',
    'notifications.view'
)
AND NOT EXISTS (
    SELECT 1 FROM Roles_Permisos rp 
    WHERE rp.RolID = r.RolID AND rp.PermisoID = p.PermisoID
);

-- 9. Insertar configuraciones iniciales del sistema si no existen
INSERT INTO Configuraciones (Clave, Valor, Tipo, Descripcion)
SELECT * FROM (
    SELECT 'COMISION_POR_DEFECTO' AS Clave, '2.5' AS Valor, 'decimal' AS Tipo, 'Porcentaje de comisión por defecto para cada pago' AS Descripcion
    UNION SELECT 'PENALIDAD_POR_DEFECTO', '5.0', 'decimal', 'Porcentaje de penalidad por defecto por pago atrasado'
    UNION SELECT 'DIAS_GRACIA_PENALIDAD', '3', 'entero', 'Días de gracia antes de aplicar penalidad'
    UNION SELECT 'MONEDA_PRINCIPAL', 'PEN', 'texto', 'Moneda principal del sistema'
    UNION SELECT 'REQUIERE_GARANTIA', '0', 'booleano', 'Indica si por defecto las juntas requieren garantía'
    UNION SELECT 'PUNTOS_CREDITO_INICIAL', '100', 'entero', 'Puntos de crédito iniciales para nuevos usuarios'
    UNION SELECT 'DIAS_NOTIFICACION_PAGO', '2', 'entero', 'Días antes para notificar pago pendiente'
    UNION SELECT 'MAX_PARTICIPANTES_JUNTA', '10', 'entero', 'Máximo número de participantes por junta'
) AS nuevas_configs
WHERE NOT EXISTS (
    SELECT 1 FROM Configuraciones WHERE Clave = nuevas_configs.Clave
);

-- 10. Actualizar la descripción del rol Administrador para reflejar que tiene acceso completo
UPDATE Roles SET 
    Descripcion = 'Acceso completo a todas las funcionalidades del sistema, incluyendo configuración, usuarios, juntas, participantes, pagos y cuentas bancarias'
WHERE NombreRol = 'Administrador';

-- 11. Agregar campos a la tabla Juntas si no existen
SET @dbname = DATABASE();
SET @tablename = 'Juntas';
SET @columnname = 'MaximoParticipantes';
SET @prepstmt = (SELECT IF(
  EXISTS(
    SELECT * FROM INFORMATION_SCHEMA.COLUMNS
    WHERE 
      TABLE_SCHEMA = @dbname
      AND TABLE_NAME = @tablename
      AND COLUMN_NAME = @columnname
  ),
  'SELECT 1',
  CONCAT('ALTER TABLE ', @tablename, ' ADD COLUMN ', @columnname, ' INT NOT NULL DEFAULT 10;')
));
PREPARE alterIfNotExists FROM @prepstmt;
EXECUTE alterIfNotExists;
DEALLOCATE PREPARE alterIfNotExists;

SET @columnname = 'FechaModificacion';
SET @prepstmt = (SELECT IF(
  EXISTS(
    SELECT * FROM INFORMATION_SCHEMA.COLUMNS
    WHERE 
      TABLE_SCHEMA = @dbname
      AND TABLE_NAME = @tablename
      AND COLUMN_NAME = @columnname
  ),
  'SELECT 1',
  CONCAT('ALTER TABLE ', @tablename, ' ADD COLUMN ', @columnname, ' DATETIME NULL;')
));
PREPARE alterIfNotExists FROM @prepstmt;
EXECUTE alterIfNotExists;
DEALLOCATE PREPARE alterIfNotExists;